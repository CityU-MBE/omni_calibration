function [ Xmir1, Xmir2, V, C ] = inverse_mirror_point (xx, om, T, mir)

C = T;
if size(om,1)==3 && size(om,2)==3
  V = om'*([xx(1,1);xx(2,1);1]);
else
  V = rodrigues(om)'*([xx(1,1);xx(2,1);1]);
end

% lambda1 = - ( V(2)*C(2)+V(1)*C(1) + mir(1)*C(3)*V(3) ...
%     - sqrt( 2*V(2)*C(2)*V(1)*C(1) + 2*V(2)*C(2)*mir(1)*C(3)*V(3) + 2*V(1)*C(1)*mir(1)*C(3)*V(3) + ...
%     V(1)^2*mir(3) - V(1)^2*mir(1)*C(3)^2 - V(1)^2*C(2)^2 - V(2)^2*C(1)^2 + V(2)^2*mir(3) - ...
%     V(2)^2*mir(1)*C(3)^2-mir(1)*V(3)^2*C(1)^2 + mir(1)*V(3)^2*mir(3) - ...
%     mir(1)*V(3)^2*C(2)^2)) / (V(1)^2+V(2)^2+mir(1)*V(3)^2);
% 
% lambda2 = - ( V(2)*C(2) + V(1)*C(1) + mir(1)*C(3)*V(3) + ...
%     sqrt( 2*V(2)*C(2)*V(1)*C(1) + 2*V(2)*C(2)*mir(1)*C(3)*V(3) + 2*V(1)*C(1)*mir(1)*C(3)*V(3) + ...
%     V(1)^2*mir(3) - V(1)^2*mir(1)*C(3)^2 - V(1)^2*C(2)^2 - V(2)^2*C(1)^2 + V(2)^2*mir(3) - ...
%     V(2)^2*mir(1)*C(3)^2 - mir(1)*V(3)^2*C(1)^2 + mir(1)*V(3)^2*mir(3) - ...
%     mir(1)*V(3)^2*C(2)^2)) / (V(1)^2+V(2)^2+mir(1)*V(3)^2 );

lambda1 = - (1/2) * ( 2*V(2)*C(2) + 2*V(1)*C(1) + mir(2)*V(3) + 2*mir(1)*C(3)*V(3) - ...
    sqrt( 8*V(2)*C(2)*V(1)*C(1) + 4*V(2)*C(2)*mir(2)*V(3) + 4*V(1)*C(1)*mir(2)*V(3) + 8*V(2)*C(2)*mir(1)*C(3)*V(3) ...
    + 8*V(1)*C(1)*mir(1)*C(3)*V(3) - 4*V(1)^2*mir(2)*C(3) - 4*V(1)^2*mir(1)*C(3)^2 - 4*V(2)^2*mir(2)*C(3) - ...
    4*V(2)^2*mir(1)*C(3)^2 - 4*mir(1)*V(3)^2*C(1)^2 - 4*mir(1)*V(3)^2*C(2)^2 + 4*mir(1)*V(3)^2*mir(3) + mir(2)^2*V(3)^2 - ...
    4*V(1)^2*C(2)^2 + 4*V(1)^2*mir(3) - 4*V(2)^2*C(1)^2 + 4*V(2)^2*mir(3)) ) / ( V(1)^2+V(2)^2+mir(1)*V(3)^2);

lambda2 = - (1/2) * ( 2*V(2)*C(2) + 2*V(1)*C(1) + mir(2)*V(3) + 2*mir(1)*C(3)*V(3) + ...
    sqrt( 8*V(2)*C(2)*V(1)*C(1) + 4*V(2)*C(2)*mir(2)*V(3) + 4*V(1)*C(1)*mir(2)*V(3) + 8*V(2)*C(2)*mir(1)*C(3)*V(3) ...
    + 8*V(1)*C(1)*mir(1)*C(3)*V(3) - 4*V(1)^2*mir(2)*C(3) - 4*V(1)^2*mir(1)*C(3)^2 - 4*V(2)^2*mir(2)*C(3) - ...
    4*V(2)^2*mir(1)*C(3)^2 - 4*mir(1)*V(3)^2*C(1)^2 - 4*mir(1)*V(3)^2*C(2)^2 + 4*mir(1)*V(3)^2*mir(3) + mir(2)^2*V(3)^2 - ...
    4*V(1)^2*C(2)^2 + 4*V(1)^2*mir(3) - 4*V(2)^2*C(1)^2 + 4*V(2)^2*mir(3)) ) / ( V(1)^2+V(2)^2+mir(1)*V(3)^2);


Xmir1 = C + lambda1*V;
Xmir2 = C + lambda2*V;
